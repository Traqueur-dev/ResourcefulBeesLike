plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
    id 'maven-publish'
}

group = 'fr.traqueur'
version = property('version')

project.ext {
    archiveFolder = file("archive/")
    targetFolder = file("target/")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.github.goooler.shadow'

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven {
            name = "papermc-repo"
            url = "https://repo.papermc.io/repository/maven-public/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
    }

    dependencies {
        compileOnly "io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT"
    }


    build {
        dependsOn shadowJar
    }

    compileJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = 'UTF-8'
        }
    }
}

subprojects {
    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = rootProject.archiveFolder
    }
}
repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(rootProject.archiveFolder.getAbsolutePath())
    implementation project(':ResourcefulBeesLikeAPI')
    implementation "com.github.Traqueur-dev:CommandsAPI:1.3.5"
}

jar {
    from {
        for (File file : rootProject.archiveFolder.listFiles()) {
            zipTree(file)
        }
    }
}

processResources {
    outputs.upToDateWhen { false }
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    dependsOn(jar)

    relocate 'fr.traqueur.commands.api', 'fr.traqueur.resourcefulbees.commands.api'

    archiveFileName = rootProject.name + "-" + rootProject.version + ".jar"

    delete fileTree(rootProject.targetFolder.getAbsolutePath())

    exclude '*exclude.jar'

    destinationDirectory = rootProject.targetFolder
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

clean {
    delete rootProject.archiveFolder
}

build {
    dependsOn shadowJar
    dependsOn clean
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build

shadowJar.dependsOn subprojects.build
compileJava.dependsOn childProjects.values().shadowJar

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
