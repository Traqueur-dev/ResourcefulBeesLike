plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
    id 'maven-publish'
}

group = 'fr.traqueur'
version = property('version')

project.ext {
    languages_config_version = property('languages_config_version')
    lang_config_version = property('lang_config_version')
    upgrades_config_version = property('upgrades_config_version')
    beetypes_config_version = property('beetypes_config_version')
    breeds_config_version = property('breeds_config_version')
    mutations_config_version = property('mutations_config_version')
    tools_config_version = property('tools_config_version')

    archiveFolder = file("archive/")
    targetFolder = file("target/")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.github.goooler.shadow'

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven {
            name = "papermc-repo"
            url = "https://repo.papermc.io/repository/maven-public/"
        }
        maven {
            name = "spigotmc-repo"
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/groups/public/"
        }
    }

    compileJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = 'UTF-8'
        }
    }
}

subprojects {

    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = rootProject.archiveFolder
    }

}

repositories {
    //mavenLocal()
    maven {
        name = "devmart-other"
        url = "https://nexuslite.gcnt.net/repos/other/"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.21-R0.1-SNAPSHOT"

    implementation fileTree(rootProject.archiveFolder.getAbsolutePath())
    implementation project(':ResourcefulBeesLikeAPI')

    rootProject.subprojects.findAll { it.path.startsWith(':ResourcefulBeesLikeNMS:') }.each { subproject ->
        implementation project(subproject.path)
    }

    implementation project(':ResourcefulBeesLikePlatform:Spigot')
    implementation project(':ResourcefulBeesLikePlatform:PaperSpigot')

    implementation "com.tcoded:FoliaLib:0.3.4"
    implementation 'org.bstats:bstats-bukkit:3.0.0'
    implementation "dev.dejvokep:boosted-yaml:1.3.6"
    implementation "com.github.Traqueur-dev:CommandsAPI:1.4.1"
    //implementation "fr.traqueur:CommandsAPI:1.4.0"
}

jar {
    from {
        for (File file : rootProject.archiveFolder.listFiles()) {
            zipTree(file)
        }
    }
}

processResources {
    outputs.upToDateWhen { false }
    def props = [version: version,
                 languages_config_version: languages_config_version,
                 lang_config_version: lang_config_version,
                 upgrades_config_version: upgrades_config_version,
                 beetypes_config_version: beetypes_config_version,
                 breeds_config_version: breeds_config_version,
                 mutations_config_version: mutations_config_version,
                 tools_config_version: tools_config_version]
    inputs.properties props
    filesMatching('**/*.yml') {
        expand props
    }
}

shadowJar {
    dependsOn(jar)

    relocate 'fr.traqueur.commands.api', 'fr.traqueur.resourcefulbees.commands.api'
    relocate 'org.bstats', 'fr.traqueur.resourcefulbees.bstats'
    relocate 'com.tcoded.folialib', 'fr.traqueur.resourcefulbees.platform.folia'
    relocate 'dev.dejvokep.boostedyaml', 'fr.traqueur.resourcefulbees.boostedyaml'

    archiveFileName = rootProject.name + "-" + rootProject.version + ".jar"

    delete fileTree(rootProject.targetFolder.getAbsolutePath())

    exclude '*exclude.jar'

    destinationDirectory = rootProject.targetFolder
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

clean {
    delete rootProject.archiveFolder
}

build {
    dependsOn shadowJar
    dependsOn clean
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build

shadowJar.dependsOn subprojects.build
compileJava.dependsOn childProjects.values().shadowJar

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
